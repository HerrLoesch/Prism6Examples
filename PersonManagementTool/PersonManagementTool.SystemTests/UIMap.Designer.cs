// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PersonManagementTool.SystemTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// StartApplication - Use 'StartApplicationParams' to pass parameters into this method.
        /// </summary>
        public void StartApplication()
        {

            // Launch '%USERPROFILE%\Documents\GitHub\Prism6Examples\PersonManagementTool\PersonManagementTool\bin\Debug\PersonManagementTool.exe'
            ApplicationUnderTest personManagementToolApplication = ApplicationUnderTest.Launch(this.StartApplicationParams.ExePath, this.StartApplicationParams.AlternateExePath);
        }
        
        /// <summary>
        /// AssertApplicationExists - Use 'AssertApplicationExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertApplicationExists()
        {
            #region Variable Declarations
            WpfWindow uIMainWindowWindow = this.UIMainWindowWindow;
            #endregion

            // Verify that the 'Exists' property of 'MainWindow' window equals 'True'
            Assert.AreEqual(this.AssertApplicationExistsExpectedValues.UIMainWindowWindowExists, uIMainWindowWindow.Exists);
        }
        
        /// <summary>
        /// CloseApplication
        /// </summary>
        public void CloseApplication()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Click 'Schließen' button
            Mouse.Click(uISchließenButton, new Point(34, 22));
        }
        
        #region Properties
        public virtual StartApplicationParams StartApplicationParams
        {
            get
            {
                if ((this.mStartApplicationParams == null))
                {
                    this.mStartApplicationParams = new StartApplicationParams();
                }
                return this.mStartApplicationParams;
            }
        }
        
        public virtual AssertApplicationExistsExpectedValues AssertApplicationExistsExpectedValues
        {
            get
            {
                if ((this.mAssertApplicationExistsExpectedValues == null))
                {
                    this.mAssertApplicationExistsExpectedValues = new AssertApplicationExistsExpectedValues();
                }
                return this.mAssertApplicationExistsExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private StartApplicationParams mStartApplicationParams;
        
        private AssertApplicationExistsExpectedValues mAssertApplicationExistsExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StartApplication'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartApplicationParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\GitHub\Prism6Examples\PersonManagementTool\PersonManagementTool\bin\Debug\PersonManagementTool.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\hendrik.loesch\\Documents\\GitHub\\Prism6Examples\\PersonManagementTool\\Pers" +
            "onManagementTool\\bin\\Debug\\PersonManagementTool.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\GitHub\Prism6Examples\PersonManagementTool\PersonManagementTool\bin\Debug\PersonManagementTool.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\GitHub\\Prism6Examples\\PersonManagementTool\\PersonManageme" +
            "ntTool\\bin\\Debug\\PersonManagementTool.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertApplicationExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertApplicationExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'MainWindow' window equals 'True'
        /// </summary>
        public bool UIMainWindowWindowExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    this.mUISchließenButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
}
